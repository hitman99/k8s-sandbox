// Code generated by goa v3.0.2, DO NOT EDIT.
//
// pgload HTTP server types
//
// Command:
// $ goa gen github.com/hitman99/k8s-sandbox/design

package server

import (
	pgload "github.com/hitman99/k8s-sandbox/gen/pgload"
	pgloadviews "github.com/hitman99/k8s-sandbox/gen/pgload/views"
	goa "goa.design/goa/v3/pkg"
)

// LoadRequestBody is the type of the "pgload" service "load" endpoint HTTP
// request body.
type LoadRequestBody struct {
	// How many records to generate in the table
	Count *int `form:"count,omitempty" json:"count,omitempty" xml:"count,omitempty"`
}

// LoadResponseBody is the type of the "pgload" service "load" endpoint HTTP
// response body.
type LoadResponseBody struct {
	// result code
	Code uint `form:"code" json:"code" xml:"code"`
	// status info
	Status string `form:"status" json:"status" xml:"status"`
	// processing time
	Time *string `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
}

// NewLoadResponseBody builds the HTTP response body from the result of the
// "load" endpoint of the "pgload" service.
func NewLoadResponseBody(res *pgloadviews.JSONStatusView) *LoadResponseBody {
	body := &LoadResponseBody{
		Code:   *res.Code,
		Status: *res.Status,
		Time:   res.Time,
	}
	return body
}

// NewLoadPayload builds a pgload service load endpoint payload.
func NewLoadPayload(body *LoadRequestBody) *pgload.LoadPayload {
	v := &pgload.LoadPayload{
		Count: *body.Count,
	}
	return v
}

// ValidateLoadRequestBody runs the validations defined on LoadRequestBody
func ValidateLoadRequestBody(body *LoadRequestBody) (err error) {
	if body.Count == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("count", "body"))
	}
	return
}
