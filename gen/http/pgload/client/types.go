// Code generated by goa v3.0.2, DO NOT EDIT.
//
// pgload HTTP client types
//
// Command:
// $ goa gen github.com/hitman99/k8s-sandbox/design

package client

import (
	pgload "github.com/hitman99/k8s-sandbox/gen/pgload"
	pgloadviews "github.com/hitman99/k8s-sandbox/gen/pgload/views"
)

// LoadRequestBody is the type of the "pgload" service "load" endpoint HTTP
// request body.
type LoadRequestBody struct {
	// How many records to generate in the table
	Count int `form:"count" json:"count" xml:"count"`
}

// LoadResponseBody is the type of the "pgload" service "load" endpoint HTTP
// response body.
type LoadResponseBody struct {
	// result code
	Code *int `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// status info
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// NewLoadRequestBody builds the HTTP request body from the payload of the
// "load" endpoint of the "pgload" service.
func NewLoadRequestBody(p *pgload.LoadPayload) *LoadRequestBody {
	body := &LoadRequestBody{
		Count: p.Count,
	}
	return body
}

// NewLoadJSONStatusOK builds a "pgload" service "load" endpoint result from a
// HTTP "OK" response.
func NewLoadJSONStatusOK(body *LoadResponseBody) *pgloadviews.JSONStatusView {
	v := &pgloadviews.JSONStatusView{
		Code:   body.Code,
		Status: body.Status,
	}
	return v
}
