// Code generated by goa v3.0.2, DO NOT EDIT.
//
// pgload endpoints
//
// Command:
// $ goa gen github.com/hitman99/k8s-sandbox/design

package pgload

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "pgload" service endpoints.
type Endpoints struct {
	Load goa.Endpoint
}

// NewEndpoints wraps the methods of the "pgload" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Load: NewLoadEndpoint(s),
	}
}

// Use applies the given middleware to all the "pgload" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Load = m(e.Load)
}

// NewLoadEndpoint returns an endpoint function that calls the method "load" of
// service "pgload".
func NewLoadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*LoadPayload)
		res, err := s.Load(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedJSONStatus(res, "default")
		return vres, nil
	}
}
